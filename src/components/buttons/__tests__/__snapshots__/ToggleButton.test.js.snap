// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ToggleButton should render correctly with default state 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ToggleButton
    backgroundColor="blue"
    icon="user-outline"
    offLabel="Off text"
    onClick={[Function]}
    onLabel="On text"
    toggleState={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p>
          Off text
        </p>,
        <div
          className="toggle--outside bg--blue"
        >
          <button
            className="toggle--inside"
            onClick={[Function]}
            type="button"
          >
            <Icon
              color="blue"
              icon="user-outline"
              size="R"
            />
          </button>
        </div>,
        <p>
          On text
        </p>,
      ],
      "className": "toggleButton--container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Off text",
        },
        "ref": null,
        "rendered": "Off text",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <button
            className="toggle--inside"
            onClick={[Function]}
            type="button"
          >
            <Icon
              color="blue"
              icon="user-outline"
              size="R"
            />
          </button>,
          "className": "toggle--outside bg--blue",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Icon
              color="blue"
              icon="user-outline"
              size="R"
            />,
            "className": "toggle--inside",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "color": "blue",
              "icon": "user-outline",
              "size": "R",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "button",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "On text",
        },
        "ref": null,
        "rendered": "On text",
        "type": "p",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p>
            Off text
          </p>,
          <div
            className="toggle--outside bg--blue"
          >
            <button
              className="toggle--inside"
              onClick={[Function]}
              type="button"
            >
              <Icon
                color="blue"
                icon="user-outline"
                size="R"
              />
            </button>
          </div>,
          <p>
            On text
          </p>,
        ],
        "className": "toggleButton--container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Off text",
          },
          "ref": null,
          "rendered": "Off text",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <button
              className="toggle--inside"
              onClick={[Function]}
              type="button"
            >
              <Icon
                color="blue"
                icon="user-outline"
                size="R"
              />
            </button>,
            "className": "toggle--outside bg--blue",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Icon
                color="blue"
                icon="user-outline"
                size="R"
              />,
              "className": "toggle--inside",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "color": "blue",
                "icon": "user-outline",
                "size": "R",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "button",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "On text",
          },
          "ref": null,
          "rendered": "On text",
          "type": "p",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
